//
//  main.swift
//  Algorithm_Swift
//
//  Created by sungyeopTW on 2022/06/29.
//

// MARK: - Description

/*
 676. Implement Magic Dictionary
 
 Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.

 Implement the MagicDictionary class:
 - MagicDictionary() Initializes the object.
 - void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.
 - bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.

 Example 1:
 Input
 ["MagicDictionary", "buildDict", "search", "search", "search", "search"]
 [[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
 Output
 [null, null, false, true, false, false]
 
 Explanation
 MagicDictionary magicDictionary = new MagicDictionary();
 magicDictionary.buildDict(["hello", "leetcode"]);
 magicDictionary.search("hello"); // return False
 magicDictionary.search("hhllo"); // We can change the second 'h' to 'e' to match "hello" so we return True
 magicDictionary.search("hell"); // return False
 magicDictionary.search("leetcoded"); // return False
*/


// MARK: - Inputs

// example 1
// let coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
// let output = true


// MARK: - My Solution

/*
 Runtime:
 Memory:
 */



// MARK: - Play

// let result = checkStraightLine(coordinates) == output
// print("result :", result)


// MARK: - Best practice

